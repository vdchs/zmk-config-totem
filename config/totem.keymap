#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <190>; };

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        sz {
            bindings = <&kp RA(S)>;
            key-positions = <1 2>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ue {
            bindings = <&kp RA(Y)>;
            key-positions = <7 8>;
            timeout-ms = <28>;
            layers = <0>;
        };

        oe {
            bindings = <&kp RA(P)>;
            key-positions = <8 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        j {
            bindings = <&mt_double J J>;
            key-positions = <1 25>;
            timeout-ms = <28>;
            layers = <0>;
        };

        z {
            bindings = <&mt_double Z Z>;
            key-positions = <3 2>;
            timeout-ms = <28>;
            layers = <0>;
        };

        b {
            bindings = <&mt_double B B>;
            key-positions = <12 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        q {
            bindings = <&mt_double Q Q>;
            key-positions = <2 25>;
            layers = <0>;
        };

        x {
            bindings = <&lt_hmr_l 5 X>;
            key-positions = <10 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ex {
            bindings = <&Ex>;
            key-positions = <6 7>;
            timeout-ms = <28>;
            layers = <0>;
        };

        qu {
            bindings = <&Qu>;
            key-positions = <1 2 3>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ck {
            bindings = <&Ck>;
            key-positions = <11 12 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        v {
            bindings = <&mt_double V V>;
            key-positions = <11 25>;
            timeout-ms = <28>;
            layers = <0>;
        };

        apos {
            bindings = <&mt_double APOS APOS>;
            key-positions = <18 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        func_r {
            bindings = <&lt_hmr_r_ia 5 0>;
            key-positions = <18 19>;
            timeout-ms = <28>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        ae {
            bindings = <&kp RA(Q)>;
            key-positions = <19 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        rr {
            bindings = <&double R>;
            key-positions = <25 26>;
            timeout-ms = <45>;
            layers = <0>;
        };

        m {
            bindings = <&mt_double M M>;
            key-positions = <12 25>;
            timeout-ms = <28>;
            layers = <0>;
        };

        k {
            bindings = <&mt_double K K>;
            key-positions = <25 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        f {
            bindings = <&mt_double F F>;
            key-positions = <12 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        num_comma {
            bindings = <&kp COMMA>;
            key-positions = <1 25>;
            timeout-ms = <28>;
            layers = <3>;
        };

        sym_ast {
            bindings = <&kp STAR>;
            key-positions = <12 11>;
            timeout-ms = <28>;
            layers = <2>;
        };

        dot {
            bindings = <&kp DOT>;
            key-positions = <16 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <26 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        comma_ {
            bindings = <&spacify COMMA>;
            key-positions = <26 16>;
            timeout-ms = <28>;
            layers = <0>;
        };

        sm {
            bindings = <&sm>;
            key-positions = <11 12 25>;
            timeout-ms = <28>;
            layers = <0>;
        };

        num_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <2 3>;
            timeout-ms = <28>;
            layers = <3>;
        };

        num_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
            timeout-ms = <28>;
            layers = <3>;
        };

        num_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <16 17>;
            timeout-ms = <28>;
            layers = <3>;
        };

        num_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <12 13>;
            timeout-ms = <28>;
            layers = <3>;
        };

        caps_l {
            bindings = <&caps_word>;
            key-positions = <10 13 11 12>;
            timeout-ms = <28>;
            layers = <0>;
        };

        num_gt {
            bindings = <&kp GT>;
            key-positions = <17 18>;
            timeout-ms = <28>;
            layers = <3>;
        };

        num_lt {
            bindings = <&kp LT>;
            key-positions = <11 12>;
            timeout-ms = <28>;
            layers = <3>;
        };

        lshift {
            bindings = <&sk LSHIFT>;
            key-positions = <10 13>;
        };

        rshift {
            bindings = <&sk LSHIFT>;
            key-positions = <16 19>;
        };

        caps_r {
            bindings = <&caps_word>;
            key-positions = <16 17 18 19>;
            timeout-ms = <28>;
            layers = <0>;
        };
    };

    behaviors {
        mt_arrowfy: mt_arrowfy {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_ARROW";
            bindings = <&arrowfy>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        ad_c: ad_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_C";
            #binding-cells = <0>;
            defaults = <&kp C>;
            antecedents = <
                G      B      D      P
            >;

            bindings = <
                &kp S  &kp V  &kp M  &kp H
            >;

            max-delay-ms = <200>;
        };

        ad_g: ad_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_G";
            #binding-cells = <0>;
            defaults = <&kp G>;
            antecedents = <
                B      T      Y
            >;

            bindings = <
                &kp J  &kp Z  &kp I
            >;

            max-delay-ms = <200>;
        };

        ad_p: ad_p {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_P";
            #binding-cells = <0>;
            defaults = <&kp P>;
            antecedents = <
                D
            >;

            bindings = <
                &kp V
            >;

            max-delay-ms = <200>;
        };

        ad_w: ad_w {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_W";
            #binding-cells = <0>;
            defaults = <&kp W>;
            antecedents = <
                D
            >;

            bindings = <
                &kp J
            >;

            max-delay-ms = <200>;
        };

        ad_h: ad_h {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_H";
            #binding-cells = <0>;
            defaults = <&kp H>;
            antecedents = <
                B      M      R      F
            >;

            bindings = <
                &kp R  &kp B  &kp M  &kp T
            >;

            max-delay-ms = <200>;
        };

        mt_hmr_l: mt_hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 17 16 27 18 8 9 19 25 26>;
            require-prior-idle-ms = <200>;
        };

        mt_hmr_r: mt_hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <10 0 1 11 12 2 3 24 13 25 26>;
            require-prior-idle-ms = <200>;
        };

        lt_hmr_l: lt_hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 17 16 27 18 8 9 19 25 26>;
            require-prior-idle-ms = <30>;
        };

        lt_hmr_r: lt_hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 11 12 2 3 24 13 10 25 26>;
            require-prior-idle-ms = <30>;
        };

        lt_hmr_l_ad_c: lt_hmr_l_ad_c {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_L_AD_C";
            bindings = <&mo>, <&ad_c>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 17 16 27 18 8 9 19 26 25>;
            require-prior-idle-ms = <30>;
        };

        mt_hmr_l_ad_h: mt_hmr_l_ad_h {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_L_AD_H";
            bindings = <&kp>, <&ad_h>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 17 16 27 18 8 9 19 25 26>;
            require-prior-idle-ms = <30>;
        };

        lt_thumb: lt_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_THUMB";
            bindings = <&single_sl>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "balanced";
        };

        mt_append: mt_append {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_APPEND";
            bindings = <&append>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        mt_double: mt_double {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_DOUBLE";
            bindings = <&double>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "tap-preferred";
        };

        mt_tpref: mt_tpref {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TPREF";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <190>;
        };

        mt_hmr_l_ad_w: mt_hmr_l_ad_w {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_L_AD_W";
            bindings = <&kp>, <&ad_w>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 17 16 27 18 8 9 19 25 26>;
            require-prior-idle-ms = <30>;
        };

        lt_hmr_r_ia: lt_hmr_r_ia {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_R_IA";
            bindings = <&mo>, <&ia>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 11 12 2 3 24 13 10 25 26>;
            require-prior-idle-ms = <30>;
        };
    };

    macros {
        arrowfy: arrowfy {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp GT>;
            label = "ARROWFY";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        Ex: Ex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X>;
            label = "EX";
        };

        Qu: Qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };

        Ck: ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "CK";
        };

        append: end_append {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp END &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "END_APPEND";
        };

        double: double {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE";
        };

        spacify: spacify {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp SPACE>;
            label = "SPACIFY";
        };

        sm: sm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp M>;
            label = "SM";
        };

        r_ify: r_ify {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp R &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "R_IFY";
        };

        single_sl: single_sticky {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &sl MACRO_PLACEHOLDER>;
            label = "SINGLE_STICKY";
        };

        ia: ly {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp A>;
            label = "LY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
        &mt_hmr_l_ad_w LGUI 0  &ad_g          &kp D                     &ad_p                      &trans           &trans       &mt_double L L        &kp U                     &kp O          &mt_hmr_r LGUI Y
        &lt_hmr_l_ad_c 3 0     &lt_hmr_l 2 S  &mt_hmr_l LEFT_CONTROL T  &mt_hmr_l_ad_h LEFT_ALT 0  &trans           &trans       &mt_hmr_r LEFT_ALT N  &mt_hmr_r LEFT_CONTROL E  &lt_hmr_r 2 A  &lt_hmr_r 3 I
&trans  &trans                 &trans         &trans                    &trans                     &lt_thumb 1 R    &lt 4 SPACE  &trans                &trans                    &trans         &trans            &trans
                                              &trans                    &trans                     &trans           &trans       &trans                &trans
            >;
        };

        alpha-2 {
            bindings = <
        &trans  &r_ify J  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &r_ify V  &r_ify M  &r_ify K  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans
                          &trans    &trans    &trans    &trans  &trans  &trans
            >;
        };

        sym {
            bindings = <
        &kp PRCNT  &kp AT    &kp PIPE   &kp AMPS  &trans                 &trans  &kp UNDER                &kp PLUS                 &mt_tpref TILDE GRAVE  &kp CARET
        &kp HASH   &kp DLLR  &kp QMARK  &kp EXCL  &trans                 &trans  &mt_arrowfy MINUS MINUS  &mt_arrowfy EQUAL EQUAL  &kp COLON              &mt_append SEMI SEMI
&trans  &trans     &trans    &trans     &trans    &mt_tpref BSLH FSLH    &trans  &trans                   &trans                   &trans                 &trans                &trans
                             &trans     &trans    &trans                 &trans  &trans                   &trans
            >;
        };

        num {
            bindings = <
        &trans  &kp DOT  &kp LPAR  &kp RPAR  &trans    &trans  &kp N7  &kp N8  &kp N9  &trans
        &trans  &kp N3   &kp N2    &kp N1    &trans    &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans   &trans    &trans    &kp N0    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans    &trans    &trans    &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
        &kp LGUI  &kp TAB   &kp PG_DN         &kp PG_UP       &trans        &trans  &kp HOME  &kp END   &kp DEL  &trans
        &kp ESC   &kp BSPC  &kp LEFT_CONTROL  &mt LALT ENTER  &trans        &trans  &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT
&trans  &trans    &trans    &trans            &trans          &kp LSHIFT    &trans  &trans    &trans    &trans   &trans     &trans
                            &trans            &trans          &trans        &trans  &trans    &trans
            >;
        };

        func {
            bindings = <
        &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE  &trans    &trans  &kp PSCRN  &kp F11  &kp F12  &trans
        &kp F1  &kp F2        &kp F3        &kp F4      &trans    &trans  &kp F7     &kp F8   &kp F9   &kp F10
&trans  &trans  &trans        &trans        &trans      &kp F5    &kp F6  &trans     &trans   &trans   &trans   &trans
                              &trans        &trans      &trans    &trans  &trans     &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
