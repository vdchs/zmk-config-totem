#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <190>; };

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        sz {
            bindings = <&szR>;
            key-positions = <1 2>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ue {
            bindings = <&kp RA(Y)>;
            key-positions = <7 8>;
            timeout-ms = <28>;
            layers = <0>;
        };

        oe {
            bindings = <&kp RA(P)>;
            key-positions = <8 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        j {
            bindings = <&mt LS(J) J>;
            key-positions = <1 25>;
            timeout-ms = <28>;
            layers = <0>;
        };

        z {
            bindings = <&mt LS(Z) Z>;
            key-positions = <3 25>;
            timeout-ms = <28>;
            layers = <0>;
        };

        b {
            bindings = <&mt LS(B) B>;
            key-positions = <25 12>;
            timeout-ms = <28>;
            layers = <0>;
        };

        q {
            bindings = <&mt_double Q Q>;
            key-positions = <0 1>;
            layers = <0>;
        };

        x {
            bindings = <&lt_hmr_l 4 X>;
            key-positions = <10 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ex {
            bindings = <&Ex>;
            key-positions = <16 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        qu {
            bindings = <&Qu>;
            key-positions = <1 2 3>;
            timeout-ms = <28>;
            layers = <0>;
        };

        ck {
            bindings = <&Ck>;
            key-positions = <11 12 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        v {
            bindings = <&mt LS(V) V>;
            key-positions = <25 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        apos {
            bindings = <&mt_double APOS APOS>;
            key-positions = <18 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        func_r {
            bindings = <&mo 4>;
            key-positions = <18 19>;
            timeout-ms = <28>;
            layers = <0>;
            require-prior-idle-ms = <150>;
        };

        ae {
            bindings = <&kp RA(Q)>;
            key-positions = <19 17>;
            timeout-ms = <28>;
            layers = <0>;
        };

        rr {
            bindings = <&double R>;
            key-positions = <25 26>;
            timeout-ms = <45>;
            layers = <0>;
        };

        m {
            bindings = <&mt_double M M>;
            key-positions = <12 11>;
            timeout-ms = <28>;
            layers = <0>;
        };

        k {
            bindings = <&mt LS(K) K>;
            key-positions = <25 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        f {
            bindings = <&mt_double F F>;
            key-positions = <12 13>;
            timeout-ms = <28>;
            layers = <0>;
        };

        r2 {
            bindings = <&kp R>;
            key-positions = <12 1>;
            timeout-ms = <28>;
            layers = <0>;
        };
    };

    behaviors {
        mt_arrowfy: mt_arrowfy {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_ARROW";
            bindings = <&arrowfy>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        ad_c: ad_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_C";
            #binding-cells = <0>;
            defaults = <&kp C>;
            antecedents = <
                G      B      D      P
            >;

            bindings = <
                &kp S  &kp V  &kp M  &kp H
            >;

            max-delay-ms = <200>;
        };

        ad_g: ad_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_G";
            #binding-cells = <0>;
            defaults = <&kp G>;
            antecedents = <
                B      T      Y
            >;

            bindings = <
                &kp J  &kp Z  &kp I
            >;

            max-delay-ms = <200>;
        };

        ad_p: ad_p {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_P";
            #binding-cells = <0>;
            defaults = <&kp P>;
            antecedents = <
                D
            >;

            bindings = <
                &kp V
            >;

            max-delay-ms = <200>;
        };

        ad_w: ad_w {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_W";
            #binding-cells = <0>;
            defaults = <&kp W>;
            antecedents = <
                D
            >;

            bindings = <
                &kp J
            >;

            max-delay-ms = <200>;
        };

        ad_h: ad_h {
            compatible = "zmk,behavior-antecedent-morph";
            label = "ADAPTIVE_H";
            #binding-cells = <0>;
            defaults = <&kp H>;
            antecedents = <
                B      M
            >;

            bindings = <
                &kp R  &kp B
            >;

            max-delay-ms = <200>;
        };

        mt_hmr_l: mt_hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 5 6 7 17 16 26 27 28 29 18 8 9 19 30 31 32 33 34 36 37>;
            require-prior-idle-ms = <200>;
        };

        mt_hmr_r: mt_hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <20 21 10 0 1 11 22 23 12 2 3 24 13 4 14 25 32 33 34 36 37>;
            require-prior-idle-ms = <200>;
        };

        lt_hmr_l: lt_hmr_l {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 5 6 7 17 16 26 27 28 29 18 8 9 19 30 31 32 33 34 36 37>;
            require-prior-idle-ms = <30>;
        };

        lt_hmr_r: lt_hmr_r {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <20 21 10 0 1 11 22 23 12 2 3 24 13 4 14 25 32 33 34 36 37>;
            require-prior-idle-ms = <30>;
        };

        low_u: low_u {
            compatible = "zmk,behavior-mod-morph";
            label = "LOW_U";
            bindings = <&kp U>, <&kp U>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        low_x: low_x {
            compatible = "zmk,behavior-mod-morph";
            label = "LOW_X";
            bindings = <&kp X>, <&kp X>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        lt_hmr_l_ad_c: lt_hmr_l_ad_c {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HMR_L_AD_C";
            bindings = <&mo>, <&ad_c>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 5 6 7 17 16 26 27 28 29 18 8 9 19 30 31 32 33 34 36 37>;
            require-prior-idle-ms = <30>;
        };

        mt_hmr_l_ad_h: mt_hmr_l_ad_h {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HMR_L_AD_H";
            bindings = <&kp>, <&ad_h>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
            hold-trigger-key-positions = <15 5 6 7 17 16 26 27 28 29 18 8 9 19 30 31 32 33 34 36 37>;
            require-prior-idle-ms = <30>;
        };

        mt_thumb: mt_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_THUMB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "balanced";
        };

        szR: szR {
            compatible = "zmk,behavior-mod-morph";
            label = "SZR";
            bindings = <&kp RA(S)>, <&kp LS(R)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mt_append: mt_append {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_APPEND";
            bindings = <&append>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };

        mt_double: mt_double {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_DOUBLE";
            bindings = <&double>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
        };
    };

    macros {
        arrowfy: arrowfy {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp GT>;
            label = "ARROWFY";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        Ex: Ex {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &low_x>;
            label = "EX";
        };

        Qu: Qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &low_u>;
            label = "QU";
        };

        Ck: ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
            label = "CK";
        };

        append: end_append {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp END &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "END_APPEND";
        };

        double: double {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "DOUBLE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha {
            bindings = <
        &ad_w               &ad_g          &kp D                     &ad_p                      &trans                &trans       &mt_double L L          &kp U                     &kp O          &kp Y
        &lt_hmr_l_ad_c 2 0  &lt_hmr_l 1 S  &mt_hmr_l LEFT_CONTROL T  &mt_hmr_l_ad_h LEFT_ALT 0  &trans                &trans       &mt_hmr_r LEFT_ALT N    &mt_hmr_r LEFT_CONTROL E  &lt_hmr_r 1 A  &lt_hmr_r 2 I
&trans  &trans              &trans         &trans                    &mt_hmr_l LEFT_GUI COMMA   &mt_thumb LSHIFT R    &lt 3 SPACE  &mt_hmr_r LEFT_GUI DOT  &trans                    &trans         &trans         &trans
                                           &trans                    &trans                     &trans                &trans       &trans                  &trans
            >;
        };

        sym {
            bindings = <
        &kp PRCNT  &kp AT    &kp PIPE  &kp AMPS   &trans           &trans     &kp CARET  &kp TILDE                &kp GRAVE  &mt_arrowfy TILDE MINUS
        &kp HASH   &kp DLLR  &kp STAR  &kp EXCL   &trans           &trans     &kp PLUS   &mt_arrowfy EQUAL EQUAL  &kp COLON  &mt_append SEMI SEMI
&trans  &trans     &trans    &trans    &kp QMARK  &mt BSLH FSLH    &kp SPACE  &kp UNDER  &trans                   &trans     &trans                   &trans
                             &trans    &trans     &trans           &trans     &trans     &trans
            >;
        };

        num {
            bindings = <
        &kp LBRC  &kp RBRC  &kp LPAR  &kp RPAR  &trans    &trans     &kp N7    &kp N8  &kp N9  &trans
        &trans    &kp N3    &kp N2    &kp N1    &trans    &trans     &kp N4    &kp N5  &kp N6  &trans
&trans  &trans    &trans    &trans    &kp LBKT  &kp N0    &kp SPACE  &kp RBKT  &trans  &trans  &trans  &trans
                            &trans    &trans    &trans    &trans     &trans    &trans
            >;
        };

        nav {
            bindings = <
        &trans   &kp TAB   &trans            &trans          &trans        &trans  &kp HOME   &kp END    &kp DEL  &trans
        &kp ESC  &kp BSPC  &kp LEFT_CONTROL  &mt LALT ENTER  &trans        &trans  &kp LEFT   &kp DOWN   &kp UP   &kp RIGHT
&trans  &trans   &trans    &trans            &kp LEFT_GUI    &kp LSHIFT    &trans  &kp PG_DN  &kp PG_UP  &trans   &trans     &trans
                           &trans            &trans          &trans        &trans  &trans     &trans
            >;
        };

        func {
            bindings = <
        &trans  &kp C_VOL_DN  &kp C_VOL_UP         &kp C_MUTE       &trans    &trans  &kp PSCRN        &kp F11       &kp F12  &trans
        &kp F1  &kp F2        &mt LEFT_CONTROL F3  &mt LEFT_ALT F4  &trans    &trans  &mt LEFT_ALT F7  &mt LCTRL F8  &kp F9   &kp F10
&trans  &trans  &trans        &trans               &mt LGUI F5      &trans    &trans  &mt RGUI F6      &trans        &trans   &trans   &trans
                              &trans               &trans           &trans    &trans  &trans           &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
